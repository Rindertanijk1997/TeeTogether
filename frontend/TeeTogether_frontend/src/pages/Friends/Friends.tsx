import { useEffect, useState } from "react";
import "./Friends.css";

const BACKEND_URL = "https://w9h1wx1u7l.execute-api.eu-north-1.amazonaws.com";

interface User {
  FriendId: string;
  UserId: string;
  Username: string;
  CurrentHCP: string;
  CreatedAt?: string;
}

interface FriendRequest {
  RequesterId: string;
  FriendId: string;
  Username: string;
  CurrentHCP: string;
  CreatedAt: string;
}

function Friends() {
  const [friends, setFriends] = useState<User[]>([]);
  const [friendRequests, setFriendRequests] = useState<FriendRequest[]>([]);
  const [users, setUsers] = useState<User[]>([]);
  const [showFriends, setShowFriends] = useState(false);

  const token = localStorage.getItem("token");
  const userId = localStorage.getItem("userId");

  useEffect(() => {
    if (userId) {
      fetchFriends().then(() => {
        fetchUsers();
      });
      fetchFriendRequests();
    }
  }, [userId]);
  

  const fetchFriends = async () => {
    try {
      const response = await fetch(`${BACKEND_URL}/friends?userId=${userId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!response.ok) throw new Error("Kunde inte h√§mta v√§nner.");
      const data = await response.json();
      setFriends(data);
    } catch (error) {
      console.error("‚ùå Fel vid h√§mtning av v√§nner:", error);
    }
  };

  const fetchFriendRequests = async () => {
    try {
      console.log("üîç H√§mtar v√§nf√∂rfr√•gningar...");
      const response = await fetch(`${BACKEND_URL}/friends/search?userId=${userId}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
  
      if (!response.ok) throw new Error("Kunde inte h√§mta v√§nf√∂rfr√•gningar.");
  
      const data = await response.json();
      console.log("üìå API-svar f√∂r v√§nf√∂rfr√•gningar:", data);
  
      if (!Array.isArray(data)) {
        console.warn("‚ö†Ô∏è Ov√§nat format p√• data, f√∂rv√§ntade en array.");
        return;
      }
  
      console.log("üõ† F√∂re state update, r√•data:", data);
  
      setFriendRequests(data); // Direkt s√§tta hela arrayen
    } catch (error) {
      console.error("‚ùå Fel vid h√§mtning av v√§nf√∂rfr√•gningar:", error);
    }
  };
  
  const fetchUsers = async () => {
    try {
      console.log("üîÑ H√§mtar anv√§ndare...");
      const response = await fetch(`${BACKEND_URL}/users`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!response.ok) throw new Error("Kunde inte h√§mta anv√§ndare.");
      const data = await response.json();
  
      console.log("üìå Alla anv√§ndare fr√•n API:", data);
      console.log("üìå Mina v√§nner:", friends);
  
      // ‚úÖ Filtrera bort befintliga v√§nner och anv√§ndaren sj√§lv
      const filteredUsers = data.filter((user: User) => {
        const isFriend = friends.some(
          (friend) => friend.FriendId === user.UserId || friend.UserId === user.UserId
        );
        return user.UserId !== userId && !isFriend;
      });
  
      console.log("üìå Potentiella v√§nner efter filtrering:", filteredUsers);
      setUsers(filteredUsers);
    } catch (error) {
      console.error("‚ùå Fel vid h√§mtning av anv√§ndare:", error);
    }
  };
  

  console.log("üìù Renderar v√§nf√∂rfr√•gningar:", friendRequests);

  const sendFriendRequest = async (friendId?: string) => {
    if (!friendId) {
      console.error("‚ùå Kan inte skicka v√§nf√∂rfr√•gan utan ett giltigt UserId.");
      return;
    }
  
    try {
      console.log("üìå Skickar v√§nf√∂rfr√•gan till:", friendId);
      const response = await fetch(`${BACKEND_URL}/friends/request`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ userId, friendId }),
      });
  
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Kunde inte skicka v√§nf√∂rfr√•gan.");
      }
  
      console.log("‚úÖ V√§nf√∂rfr√•gan skickad!");
      fetchFriendRequests(); // Uppdatera listan med v√§nf√∂rfr√•gningar
      fetchUsers(); // Uppdatera listan med potentiella v√§nner
    } catch (error) {
      console.error("‚ùå Fel vid skickande av v√§nf√∂rfr√•gan:", error);
    }
  };
  

  const acceptFriendRequest = async (friendId: string) => {
    try {
      console.log("üìå Accepterar v√§nf√∂rfr√•gan fr√•n:", friendId);
      const response = await fetch(`${BACKEND_URL}/friends/accept`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ userId, friendId }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "N√•got gick fel vid acceptans av v√§nf√∂rfr√•gan.");
      }

      console.log("‚úÖ V√§nf√∂rfr√•gan accepterad!");
      fetchFriends(); // Uppdatera v√§nlistan
      fetchFriendRequests(); // Ta bort den fr√•n f√∂rfr√•gningar
    } catch (error) {
      console.error("‚ùå Fel vid accepterande av v√§nf√∂rfr√•gan:", error);
    }
  };

  return (
    <div className="friends-container">
      <h2>V√§nner</h2>

      <button onClick={() => setShowFriends(!showFriends)} className="toggle-button">
        {showFriends ? "Visa v√§nf√∂rfr√•gningar" : "Visa v√§nner"}
      </button>

      {showFriends ? (
        <div>
          <h3>Mina v√§nner</h3>
          {friends.length > 0 ? (
            <ul>
              {friends.map((friend) => (
                <li key={`friend-${friend.UserId}`}>
                  {friend.Username} (HCP: {friend.CurrentHCP})
                </li>
              ))}
            </ul>
          ) : (
            <p>Du har inga v√§nner √§nnu.</p>
          )}
        </div>
      ) : (
        <div>
         <h3>V√§nf√∂rfr√•gningar</h3>
{friendRequests.length > 0 ? (
  <ul>
    {friendRequests.map((req) => (
      <li key={`request-${req.RequesterId}`}>
        {req.Username} (HCP: {req.CurrentHCP})
        <button onClick={() => acceptFriendRequest(req.RequesterId)}>‚úî</button>
      </li>
    ))}
  </ul>
) : (
  <p>Inga v√§nf√∂rfr√•gningar.</p>
)}


          <h3>Hitta golfv√§nner</h3>
          {users.length > 0 ? (
            <ul>
              {users.map((user) => (
                <li key={`user-${user.UserId}`}>
                  {user.Username} (HCP: {user.CurrentHCP})
                  <button onClick={() => sendFriendRequest(user.UserId)}>‚ûï</button>
                </li>
              ))}
            </ul>
          ) : (
            <p>Inga tillg√§ngliga anv√§ndare.</p>
          )}
        </div>
      )}
    </div>
  );
}

export default Friends;

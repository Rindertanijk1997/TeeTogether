import { APIGatewayEvent } from "aws-lambda";
import { DynamoDB } from "aws-sdk";

const dynamoDb = new DynamoDB.DocumentClient();

export const handler = async (event: APIGatewayEvent) => {
    try {
      const userId = event.queryStringParameters?.userId;
      if (!userId) {
        return {
          statusCode: 400,
          body: JSON.stringify({ error: "UserId kr√§vs f√∂r att h√§mta v√§nf√∂rfr√•gningar." }),
        };
      }
  
      console.log("üîç H√§mtar v√§nf√∂rfr√•gningar f√∂r anv√§ndare:", userId);
  
      // üîπ H√§mta v√§nf√∂rfr√•gningar d√§r anv√§ndaren √§r mottagaren
      const requestsParams = {
        TableName: "FriendRequests",
        FilterExpression: "FriendId = :userId AND #status = :pending",
        ExpressionAttributeValues: { ":userId": userId, ":pending": "pending" },
        ExpressionAttributeNames: { "#status": "Status" },
      };
  
      const requestsResult = await dynamoDb.scan(requestsParams).promise();
      const pendingRequests = requestsResult.Items || [];
  
      console.log("üìå Pending friend requests:", JSON.stringify(pendingRequests, null, 2));
  
      // üîπ Om inga v√§nf√∂rfr√•gningar finns, returnera tom array
      if (pendingRequests.length === 0) {
        return {
          statusCode: 200,
          body: JSON.stringify([]),
        };
      }
  
      // üîπ H√§mta detaljer om de anv√§ndare som skickade f√∂rfr√•gningarna
      const requesterIds = pendingRequests.map((req) => req.RequesterId);
  
      console.log("üîç H√§mtar anv√§ndarinfo f√∂r RequesterIds:", JSON.stringify(requesterIds, null, 2));
  
      const batchGetParams: DynamoDB.DocumentClient.BatchGetItemInput = {
        RequestItems: {
          GolfUser: {
            Keys: requesterIds.map((id) => ({ UserId: id })),
          },
        },
      };
  
      const userResults = await dynamoDb.batchGet(batchGetParams).promise();
      const users = userResults.Responses?.GolfUser || [];
  
      console.log("üìå H√§mtade anv√§ndare:", JSON.stringify(users, null, 2));
  
      // üîπ Koppla ihop anv√§ndardata med v√§nf√∂rfr√•gningar
      const enrichedRequests = pendingRequests.map((req) => {
        const user = users.find((u) => u.UserId === req.RequesterId);
        return {
          RequesterId: req.RequesterId,
          FriendId: req.FriendId,
          Username: user?.Username || "Ok√§nd anv√§ndare",
          CurrentHCP: user?.CurrentHCP ?? "Ok√§nt",
          CreatedAt: req.CreatedAt,
        };
      });
  
      console.log("‚úÖ API-svar med v√§nf√∂rfr√•gningar:", JSON.stringify(enrichedRequests, null, 2));
  
      return {
        statusCode: 200,
        body: JSON.stringify(enrichedRequests),
      };
    } catch (error) {
      console.error("‚ùå Fel vid h√§mtning av v√§nf√∂rfr√•gningar:", error);
      return {
        statusCode: 500,
        body: JSON.stringify({ error: "N√•got gick fel vid h√§mtning av v√§nf√∂rfr√•gningar." }),
      };
    }
  };
  
